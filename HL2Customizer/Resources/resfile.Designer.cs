//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HL2Customizer.Resources {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class resfile {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal resfile() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("HL2Customizer.Resources.resfile", typeof(resfile).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap applyButton {
            get {
                object obj = ResourceManager.GetObject("applyButton", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] autoexec {
            get {
                object obj = ResourceManager.GetObject("autoexec", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] brands {
            get {
                object obj = ResourceManager.GetObject("brands", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] clientscheme {
            get {
                object obj = ResourceManager.GetObject("clientscheme", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] Default {
            get {
                object obj = ResourceManager.GetObject("Default", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap deleteIcon {
            get {
                object obj = ResourceManager.GetObject("deleteIcon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // DSP preset definition file.
        ///
        ////////////////////////////////////////
        ///// WARNING: do not edit this file! //
        ////////////////////////////////////////
        ///
        ///// console &quot;dsp_reload&quot; reloads while engine running
        ///
        ///// PROCESSOR TYPE:
        /////  NULL			0		// pass through - must be 0
        /////  DLY				1		// simple feedback reverb
        /////  RVA				2		// parallel reverbs
        /////  FLT				3		// lowpass or highpass filter
        /////  CRS				4		// chorus					NOT TESTED
        /////  PTC				5		// pitch shifter			NOT TESTED (UPDATE: DOES NOT INTEGRATE WITH NE [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string dsp_presets {
            get {
                return ResourceManager.GetString("dsp_presets", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // DSP preset definition file.
        ///
        ////////////////////////////////////////
        ///// WARNING: do not edit this file! //
        ////////////////////////////////////////
        ///
        ///// console &quot;dsp_reload&quot; reloads while engine running
        ///
        ///// PROCESSOR TYPE:
        /////  NULL			0		// pass through - must be 0
        /////  DLY				1		// simple feedback reverb
        /////  RVA				2		// parallel reverbs
        /////  FLT				3		// lowpass or highpass filter
        /////  CRS				4		// chorus					NOT TESTED
        /////  PTC				5		// pitch shifter			NOT TESTED (UPDATE: DOES NOT INTEGRATE WITH NE [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string dsp_presets_nodelay {
            get {
                return ResourceManager.GetString("dsp_presets_nodelay", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] Example {
            get {
                object obj = ResourceManager.GetObject("Example", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] halflife2 {
            get {
                object obj = ResourceManager.GetObject("halflife2", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
        /// </summary>
        internal static System.Drawing.Icon hl2c {
            get {
                object obj = ResourceManager.GetObject("hl2c", resourceCulture);
                return ((System.Drawing.Icon)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap HLogo {
            get {
                object obj = ResourceManager.GetObject("HLogo", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // sample animation script
        /////
        /////
        ///// commands:
        /////	Animate &lt;panel name&gt; &lt;variable&gt; &lt;target value&gt; &lt;interpolator&gt; &lt;start time&gt; &lt;duration&gt;
        /////		variables:
        /////			FgColor
        /////			BgColor
        /////			Position
        /////			Size
        /////			Blur		(hud panels only)
        /////			TextColor	(hud panels only)
        /////			Ammo2Color	(hud panels only)
        /////			Alpha		(hud weapon selection only)
        /////			SelectionAlpha  (hud weapon selection only)
        /////			TextScan	(hud weapon selection only)
        /////
        /////		interpolator:
        /////			Linear
        /////			Accel - starts moving slow,  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string hudanimations {
            get {
                return ResourceManager.GetString("hudanimations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] hudlayout {
            get {
                object obj = ResourceManager.GetObject("hudlayout", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] ScoreBoard {
            get {
                object obj = ResourceManager.GetObject("ScoreBoard", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] sourcescheme {
            get {
                object obj = ResourceManager.GetObject("sourcescheme", resourceCulture);
                return ((byte[])(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 0.4.9.
        /// </summary>
        internal static string Version {
            get {
                return ResourceManager.GetString("Version", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // 357
        ///
        ///WeaponData
        ///{
        ///	// Weapon data is loaded by both the Game and Client DLLs.
        ///	&quot;printname&quot;	&quot;|NAME|&quot;
        ///	&quot;viewmodel&quot;			&quot;models/weapons/v_357.mdl&quot;
        ///	&quot;playermodel&quot;		&quot;models/weapons/w_357.mdl&quot;
        ///	&quot;anim_prefix&quot;		&quot;python&quot;
        ///	&quot;bucket&quot;			&quot;1&quot;
        ///	&quot;bucket_position&quot;	&quot;1&quot;
        ///
        ///	&quot;clip_size&quot;			&quot;6&quot;
        ///	&quot;default_clip&quot;		&quot;6&quot;
        ///	&quot;primary_ammo&quot;		&quot;357&quot;
        ///	&quot;secondary_ammo&quot;	&quot;None&quot;
        ///
        ///	&quot;weight&quot;		&quot;7&quot;
        ///	&quot;item_flags&quot;		&quot;0&quot;
        ///
        ///	&quot;damage&quot;		&quot;75&quot;
        ///
        ///	// Sounds for the weapon. There is a max of 16 sounds per category (i.e. max 16 &quot;single_shot&quot; s [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string weapon_357 {
            get {
                return ResourceManager.GetString("weapon_357", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Assault Rifle 2
        ///
        ///WeaponData
        ///{
        ///	// Weapon data is loaded by both the Game and Client DLLs.
        ///	&quot;printname&quot;	&quot;|NAME|&quot;
        ///	&quot;viewmodel&quot;			&quot;models/weapons/v_irifle.mdl&quot;
        ///	&quot;playermodel&quot;			&quot;models/weapons/w_irifle.mdl&quot;
        ///	&quot;anim_prefix&quot;			&quot;ar2&quot;
        ///	&quot;bucket&quot;			&quot;2&quot;
        ///	&quot;bucket_position&quot;		&quot;1&quot;
        ///
        ///	&quot;clip_size&quot;			&quot;30&quot;
        ///	&quot;default_clip&quot;			&quot;60&quot;
        ///
        ///	&quot;clip2_size&quot;			&quot;-1&quot;
        ///	&quot;default_clip2&quot;			&quot;-1&quot;
        ///
        ///	&quot;primary_ammo&quot;			&quot;AR2&quot;
        ///	&quot;secondary_ammo&quot;		&quot;AR2AltFire&quot;
        ///
        ///	&quot;weight&quot;			&quot;5&quot;
        ///	&quot;item_flags&quot;			&quot;0&quot;
        ///	&quot;damage&quot;			&quot;11&quot;
        ///
        ///	// Sounds for  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string weapon_ar2 {
            get {
                return ResourceManager.GetString("weapon_ar2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Crossbow
        ///
        ///WeaponData
        ///{
        ///	// Weapon data is loaded by both the Game and Client DLLs.
        ///	&quot;printname&quot;	&quot;|NAME|&quot;
        ///	&quot;viewmodel&quot;		&quot;models/weapons/v_crossbow.mdl&quot;
        ///	&quot;playermodel&quot;	&quot;models/weapons/w_crossbow.mdl&quot;
        ///	&quot;anim_prefix&quot;	&quot;bow&quot;
        ///	&quot;bucket&quot;			&quot;3&quot;
        ///	&quot;bucket_position&quot;	&quot;1&quot;
        ///
        ///	&quot;clip_size&quot;		&quot;1&quot;
        ///	&quot;default_clip&quot;		&quot;5&quot;
        ///	&quot;primary_ammo&quot;		&quot;XBowBolt&quot;
        ///	&quot;secondary_ammo&quot;	&quot;None&quot;
        ///
        ///	&quot;weight&quot;		&quot;6&quot;
        ///	&quot;item_flags&quot;		&quot;0&quot;
        ///
        ///	&quot;damage&quot;		&quot;100&quot;
        ///
        ///	// Sounds for the weapon. There is a max of 16 sounds per category (i.e. max 16 &quot; [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string weapon_crossbow {
            get {
                return ResourceManager.GetString("weapon_crossbow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Crowbar
        ///
        ///WeaponData
        ///{
        ///	// Weapon data is loaded by both the Game and Client DLLs.
        ///	&quot;printname&quot;	&quot;|NAME|&quot;
        ///	&quot;viewmodel&quot;				&quot;models/weapons/v_crowbar.mdl&quot;
        ///	&quot;playermodel&quot;			&quot;models/weapons/w_crowbar.mdl&quot;
        ///	&quot;anim_prefix&quot;			&quot;crowbar&quot;
        ///	&quot;bucket&quot;				&quot;0&quot;
        ///	&quot;bucket_position&quot;		&quot;0&quot;
        ///
        ///	&quot;clip_size&quot;				&quot;-1&quot;
        ///	&quot;primary_ammo&quot;			&quot;None&quot;
        ///	&quot;secondary_ammo&quot;		&quot;None&quot;
        ///
        ///	&quot;weight&quot;				&quot;0&quot;
        ///	&quot;item_flags&quot;			&quot;0&quot;
        ///
        ///	// Sounds for the weapon. There is a max of 16 sounds per category (i.e. max 16 &quot;single_shot&quot; sounds)
        ///	SoundD [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string weapon_crowbar {
            get {
                return ResourceManager.GetString("weapon_crowbar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WeaponData
        ///{
        ///	// Weapon data is loaded by both the Game and Client DLLs.
        ///	&quot;printname&quot;	&quot;|NAME|&quot;
        ///	&quot;viewmodel&quot;				&quot;models/weapons/v_grenade.mdl&quot;
        ///	&quot;playermodel&quot;			&quot;models/weapons/w_grenade.mdl&quot;
        ///	&quot;anim_prefix&quot;			&quot;Grenade&quot;
        ///	&quot;bucket&quot;				&quot;4&quot;
        ///	&quot;bucket_position&quot;		&quot;0&quot;
        ///
        ///	&quot;clip_size&quot;				&quot;-1&quot;
        ///	&quot;clip2_size&quot;			&quot;-1&quot;
        ///	&quot;default_clip&quot;			&quot;1&quot;
        ///	&quot;default_clip2&quot;			&quot;-1&quot;
        ///
        ///	&quot;primary_ammo&quot;			&quot;grenade&quot;
        ///	&quot;secondary_ammo&quot;		&quot;None&quot;
        ///
        ///	&quot;weight&quot;				&quot;1&quot;
        ///	&quot;item_flags&quot;			&quot;18&quot;	// ITEM_FLAG_NOAUTORELOAD | ITEM_FLAG_EXHAUSTIBLE
        ///	 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string weapon_frag {
            get {
                return ResourceManager.GetString("weapon_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Physics Gun
        ///
        ///WeaponData
        ///{
        ///	// Weapon data is loaded by both the Game and Client DLLs.
        ///	&quot;printname&quot;	&quot;|NAME|&quot;
        ///	&quot;viewmodel&quot;			&quot;models/weapons/v_physcannon.mdl&quot;
        ///	&quot;playermodel&quot;		&quot;models/weapons/w_Physics.mdl&quot;
        ///	&quot;anim_prefix&quot;		&quot;gauss&quot;
        ///	&quot;bucket&quot;			&quot;0&quot;
        ///	&quot;bucket_position&quot;	&quot;2&quot;
        ///	&quot;clip_size&quot;			&quot;0&quot;
        ///	&quot;clip2_size&quot;		&quot;0&quot;
        ///	&quot;primary_ammo&quot;		&quot;None&quot;
        ///	&quot;secondary_ammo&quot;	&quot;None&quot;
        ///	&quot;default_clip&quot;		&quot;0&quot;
        ///	&quot;default_clip2&quot;		&quot;0&quot;
        ///	&quot;weight&quot;			&quot;0&quot;
        ///	&quot;autoswitchto&quot;		&quot;0&quot;
        ///	&quot;autoswitchfrom&quot;	&quot;0&quot;
        ///	&quot;item_flags&quot;		&quot;2&quot;
        ///
        ///	SoundData        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string weapon_physcannon {
            get {
                return ResourceManager.GetString("weapon_physcannon", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Pistol
        ///
        ///WeaponData
        ///{
        ///	// Weapon data is loaded by both the Game and Client DLLs.
        ///	&quot;printname&quot;	&quot;|NAME|&quot;
        ///	&quot;viewmodel&quot;			&quot;models/weapons/v_pistol.mdl&quot;
        ///	&quot;playermodel&quot;		&quot;models/weapons/w_pistol.mdl&quot;
        ///	&quot;anim_prefix&quot;		&quot;pistol&quot;
        ///	&quot;bucket&quot;			&quot;1&quot;
        ///	&quot;bucket_position&quot;	&quot;0&quot;
        ///
        ///	&quot;clip_size&quot;			&quot;18&quot;
        ///	&quot;primary_ammo&quot;		&quot;Pistol&quot;
        ///	&quot;secondary_ammo&quot;	&quot;None&quot;
        ///
        ///	&quot;weight&quot;			&quot;2&quot;
        ///	&quot;item_flags&quot;			&quot;0&quot;
        ///	&quot;damage&quot;			&quot;8&quot;
        ///
        ///	// Sounds for the weapon. There is a max of 16 sounds per category (i.e. max 16 &quot;single_shot&quot; sounds)
        ///	 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string weapon_pistol {
            get {
                return ResourceManager.GetString("weapon_pistol", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Missile Launcher
        ///
        ///WeaponData
        ///{
        ///	// Weapon data is loaded by both the Game and Client DLLs.
        ///	&quot;printname&quot;	&quot;|NAME|&quot;
        ///	&quot;viewmodel&quot;				&quot;models/weapons/v_rpg.mdl&quot;
        ///	&quot;playermodel&quot;			&quot;models/weapons/w_rocket_launcher.mdl&quot;
        ///	&quot;anim_prefix&quot;			&quot;missile launcher&quot;
        ///	&quot;bucket&quot;				&quot;4&quot;
        ///	&quot;bucket_position&quot;		&quot;1&quot;
        ///	&quot;autoswitchfrom&quot;		&quot;1&quot;
        ///
        ///	&quot;clip_size&quot;				&quot;-1&quot;
        ///	&quot;clip2_size&quot;			&quot;-1&quot;
        ///	&quot;default_clip&quot;			&quot;3&quot;
        ///	&quot;default_clip2&quot;			&quot;-1&quot;
        ///
        ///	&quot;primary_ammo&quot;			&quot;rpg_round&quot;
        ///	&quot;secondary_ammo&quot;		&quot;None&quot;
        ///
        ///	&quot;weight&quot;				&quot;0&quot;
        ///	&quot;item_flag [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string weapon_rpg {
            get {
                return ResourceManager.GetString("weapon_rpg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Shotgun
        ///
        ///WeaponData
        ///{
        ///	// Weapon data is loaded by both the Game and Client DLLs.
        ///	&quot;printname&quot;	&quot;|NAME|&quot;
        ///	&quot;viewmodel&quot;				&quot;models/weapons/v_shotgun.mdl&quot;
        ///	&quot;playermodel&quot;			&quot;models/weapons/w_shotgun.mdl&quot;
        ///	&quot;anim_prefix&quot;			&quot;shotgun&quot;
        ///	&quot;bucket&quot;				&quot;3&quot;
        ///	&quot;bucket_position&quot;		&quot;0&quot;
        ///
        ///	&quot;clip_size&quot;				&quot;6&quot;
        ///	&quot;primary_ammo&quot;			&quot;Buckshot&quot;
        ///	&quot;secondary_ammo&quot;		&quot;None&quot;
        ///
        ///	&quot;weight&quot;				&quot;4&quot;
        ///	&quot;item_flags&quot;			&quot;0&quot;
        ///	&quot;damage&quot;			&quot;9&quot;
        ///
        ///	// Sounds for the weapon. There is a max of 16 sounds per category (i.e. max 16 &quot;single_sh [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string weapon_shotgun {
            get {
                return ResourceManager.GetString("weapon_shotgun", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Slam
        ///
        ///WeaponData
        ///{
        ///	// Weapon data is loaded by both the Game and Client DLLs.
        ///	&quot;printname&quot;	&quot;|NAME|&quot;
        ///	&quot;viewmodel&quot;				&quot;models/weapons/v_slam.mdl&quot;
        ///	&quot;playermodel&quot;			&quot;models/weapons/w_slam.mdl&quot;
        ///	&quot;anim_prefix&quot;			&quot;slam&quot;
        ///	&quot;bucket&quot;				&quot;4&quot;
        ///	&quot;bucket_position&quot;		&quot;2&quot;
        ///
        ///	&quot;clip_size&quot;				&quot;3&quot;
        ///	&quot;primary_ammo&quot;			&quot;None&quot;
        ///	&quot;secondary_ammo&quot;		&quot;slam&quot;
        ///	&quot;default_clip2&quot;			&quot;3&quot;
        ///
        ///	&quot;weight&quot;				&quot;1&quot;
        ///	&quot;item_flags&quot;			&quot;2&quot;
        ///
        ///	// Weapon Sprite data is loaded by the Client DLL.
        ///	TextureData
        ///	{
        ///		&quot;weapon&quot;
        ///		{
        ///				&quot;font&quot;		 [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string weapon_slam {
            get {
                return ResourceManager.GetString("weapon_slam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // Small Machine Gun 1
        ///
        ///WeaponData
        ///{
        ///	// Weapon data is loaded by both the Game and Client DLLs.
        ///	&quot;printname&quot;	&quot;|NAME|&quot;
        ///	&quot;viewmodel&quot;				&quot;models/weapons/v_smg1.mdl&quot;
        ///	&quot;playermodel&quot;			&quot;models/weapons/w_smg1.mdl&quot;	//FIXME: 
        ///	&quot;anim_prefix&quot;			&quot;smg2&quot;
        ///	&quot;bucket&quot;				&quot;2&quot;
        ///	&quot;bucket_position&quot;		&quot;0&quot;
        ///
        ///	&quot;clip_size&quot;				&quot;45&quot;
        ///	&quot;clip2_size&quot;			&quot;-1&quot;
        ///
        ///	&quot;default_clip&quot;			&quot;45&quot;
        ///	&quot;default_clip2&quot;			&quot;-1&quot;
        ///
        ///	&quot;primary_ammo&quot;			&quot;SMG1&quot;
        ///	&quot;secondary_ammo&quot;		&quot;SMG1_Grenade&quot;
        ///
        ///	&quot;weight&quot;				&quot;3&quot;
        ///	&quot;item_flags&quot;			&quot;0&quot;
        ///	&quot;damage&quot;			&quot;5&quot;
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string weapon_smg1 {
            get {
                return ResourceManager.GetString("weapon_smg1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to // stunstick
        ///
        ///WeaponData
        ///{
        ///	// Weapon data is loaded by both the Game and Client DLLs.
        ///	&quot;printname&quot;	&quot;|NAME|&quot;
        ///	&quot;viewmodel&quot;				&quot;models/weapons/v_stunstick.mdl&quot;
        ///	&quot;playermodel&quot;			&quot;models/weapons/w_stunbaton.mdl&quot;
        ///	&quot;anim_prefix&quot;			&quot;stunbaton&quot;
        ///	&quot;bucket&quot;				&quot;0&quot;
        ///	&quot;bucket_position&quot;		&quot;1&quot;
        ///
        ///	&quot;clip_size&quot;				&quot;-1&quot;
        ///	&quot;primary_ammo&quot;			&quot;None&quot;
        ///	&quot;secondary_ammo&quot;		&quot;None&quot;
        ///
        ///	&quot;weight&quot;				&quot;0&quot;
        ///	&quot;item_flags&quot;			&quot;0&quot;
        ///
        ///	// Sounds for the weapon. There is a max of 16 sounds per category (i.e. max 16 &quot;single_shot&quot; sounds)        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string weapon_stunstick {
            get {
                return ResourceManager.GetString("weapon_stunstick", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Byte[].
        /// </summary>
        internal static byte[] XHAIR {
            get {
                object obj = ResourceManager.GetObject("XHAIR", resourceCulture);
                return ((byte[])(obj));
            }
        }
    }
}
